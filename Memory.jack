// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int freeList;
    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram = 0;
//        let heap = 2048;
        let freeList = 2048; // init heap
        let freeList[0] = 2050; // pointer
        let freeList[1] = 0; //size
        let freeList[2] = 0; //poiner
        let freeList[3] = 14329; // size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address]=value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int temp,temp2,prev,ret;
        let temp = freeList;
        while (~(temp = 0))
        {
            if (temp[1] > size)
            {

                let ret = temp + 2;
                if (temp[1]>size+2)
                {
                    let temp[size+2] = temp[0];// set the next of the reminder to next of the memory which we took the block from
                    let temp[size+3] = temp[1]-size-2; // update the reminder memory size
                    let prev[0] = ret + size; // reminder to the next of the prev block
                    let temp[1]=size; // update the size of the returned memory.
                }
                else
                {
                    let prev[0] = ret + temp[1]; // reminder to the next of the prev block
                }
                let temp[0]=0; // remove the memory from the linked list
                return ret;
            }
            let prev = temp;
            let temp=temp[0];
        }
        return -1;
    }

//    |2050|  ->   |  null|
//    |0   |       |  14333|


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeList
        var int next,o_block;
        let o_block = o-2; //get the adress of the memory block 2050
        let next = freeList[0];  // get the next adress of the free list 2082
        let freeList[0]=o_block; // set the list to point to the new memory block
        let o_block[0]=next; // set the next of the new memory block to the next of the free list
        return;

    }

    /** Returns the maximal element contained in the given Array/object.
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the
        // start of the block, and this can be used to implement Memory.max.
        var int max,i, temp;
        let max=o[0];
        let i=0;
        while (i<  (o[-1]  +  1))
        {
            if (o[i]>max)
            {
                let max=o[i];
            }
            let i = i + 1;
        }
        return max;
    }
}